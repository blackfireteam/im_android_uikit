/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return rootProject.ext.bcfg.ver.versionName.contains("SNAPSHOT") == false
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = rootProject.ext.bcfg.ver.versionName

//                repository(url: mavenLocal().url)
                repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task javadocs(type: Javadoc) {
        if (project.plugins.hasPlugin('java-gradle-plugin')) {
            println('javadocs source with sourceSets.main.allSource')
            source = sourceSets.main.allSource
        } else {
            println('javadocs source with android.sourceSets.main.java.srcDirs')
            source = android.sourceSets.main.java.srcDirs
        }

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        failOnError = false
    }

    task javadocsJar(type: Jar, dependsOn: javadocs) {
        archiveClassifier.set('javadoc')
        from javadocs.destinationDir
    }

    task sourcesJar(type: Jar) {
        archiveClassifier.set('sources')

        if (project.plugins.hasPlugin('java')) {
            println('sourcesJar from sourceSets.main.java.source')
            from sourceSets.main.java.source
        } else {
            println('sourcesJar from android.sourceSets.main.java.source')
            from android.sourceSets.main.java.source
        }
    }

    artifacts {
        if (POM_INCLUDE_SRC.toBoolean()) {
            archives sourcesJar
        }
        archives javadocsJar
    }
}
